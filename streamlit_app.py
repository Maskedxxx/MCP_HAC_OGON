# streamlit_app.py

import streamlit as st
import time
import pandas as pd
from airbnb import MCPClient as AirbnbClient, Formatter
from shared import AIAgent, ListingAnalyzer
from tripadvisor import Integrator

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üè† AI Travel Assistant",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è wow-—ç—Ñ—Ñ–µ–∫—Ç–∞
st.markdown("""
<style>
/* –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */
.main-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 2rem;
    border-radius: 15px;
    color: white;
    text-align: center;
    margin-bottom: 2rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
}

.main-header h1 {
    margin: 0;
    font-size: 2.5rem;
    font-weight: 700;
}

.main-header p {
    margin: 0.5rem 0 0 0;
    font-size: 1.1rem;
    opacity: 0.9;
}

/* –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */
.param-card {
    background: linear-gradient(145deg, #f8f9fa, #e9ecef);
    padding: 1rem;
    border-radius: 10px;
    border-left: 4px solid #667eea;
    margin: 0.5rem 0;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}

/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */
.listing-card {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 15px;
    padding: 1.5rem;
    margin: 1rem 0;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
}

.listing-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 30px rgba(0,0,0,0.12);
}

/* –ö–Ω–æ–ø–∫–∏ */
.stButton > button {
    background: linear-gradient(145deg, #667eea, #764ba2);
    color: white;
    border: none;
    border-radius: 10px;
    padding: 0.5rem 1.5rem;
    font-weight: 600;
    transition: all 0.3s ease;
}

.stButton > button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
}

/* –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ */
.thinking-animation {
    text-align: center;
    padding: 2rem;
    background: linear-gradient(45deg, #f0f2ff, #faf0e6);
    border-radius: 15px;
    margin: 1rem 0;
}

/* –ú–µ—Ç—Ä–∏–∫–∏ */
.metric-container {
    background: linear-gradient(145deg, #ffffff, #f8f9fa);
    border-radius: 10px;
    padding: 1rem;
    border: 1px solid #e0e0e0;
    text-align: center;
}

/* –°—Ç–∞—Ç—É—Å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */
.status-success {
    color: #28a745;
    font-weight: bold;
}

.status-error {
    color: #dc3545;
    font-weight: bold;
}

.status-info {
    color: #17a2b8;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)


def init_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if 'initialized' not in st.session_state:
        st.session_state.airbnb_client = AirbnbClient()
        st.session_state.formatter = Formatter()
        st.session_state.ai_agent = AIAgent()
        st.session_state.analyzer = ListingAnalyzer()
        st.session_state.integrator = Integrator()
        st.session_state.airbnb_started = False
        st.session_state.tripadvisor_started = False
        st.session_state.listings = []
        st.session_state.selected_index = None
        st.session_state.search_location = ""
        st.session_state.report = ""
        st.session_state.trip_report = ""
        st.session_state.extracted_params = {}
        st.session_state.current_query = ""
        st.session_state.current_listing_data = None
        st.session_state.initialized = True


def render_header():
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.markdown("""
    <div class="main-header">
        <h1>üè† AI Travel Assistant</h1>
        <p>–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∂–∏–ª—å—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Airbnb + TripAdvisor —á–µ—Ä–µ–∑ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª</p>
    </div>
    """, unsafe_allow_html=True)


def show_server_status():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ sidebar"""
    with st.sidebar:
        st.subheader("üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # Airbnb —Å—Ç–∞—Ç—É—Å
        if st.session_state.airbnb_started:
            st.markdown('<p class="status-success">‚úÖ Airbnb MCP: –ê–∫—Ç–∏–≤–µ–Ω</p>', unsafe_allow_html=True)
        else:
            st.markdown('<p class="status-error">‚ùå Airbnb MCP: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>', unsafe_allow_html=True)
        
        # TripAdvisor —Å—Ç–∞—Ç—É—Å
        if st.session_state.tripadvisor_started:
            st.markdown('<p class="status-success">‚úÖ TripAdvisor MCP: –ê–∫—Ç–∏–≤–µ–Ω</p>', unsafe_allow_html=True)
        else:
            st.markdown('<p class="status-error">‚ùå TripAdvisor MCP: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>', unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if st.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã", use_container_width=True):
            stop_servers()
            st.rerun()


def show_thinking_animation():
    """–ê–Ω–∏–º–∞—Ü–∏—è 'AI –¥—É–º–∞–µ—Ç' —Å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–º"""
    thinking_container = st.empty()
    progress_container = st.empty()
    
    with thinking_container.container():
        st.markdown("""
        <div class="thinking-animation">
            <h3>ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...</h3>
        </div>
        """, unsafe_allow_html=True)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å —ç—Ç–∞–ø–∞–º–∏ (–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)
    stages = [
        "üîç –ü–∞—Ä—Å–∏–Ω–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞...",
        "üß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞...", 
        "‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Airbnb MCP...",
        "üîé –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞...",
        "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!"
    ]
    
    progress_bar = progress_container.progress(0)
    status_text = progress_container.empty()
    
    for i, stage in enumerate(stages):
        status_text.info(stage)
        progress_bar.progress((i + 1) / len(stages))
        time.sleep(0.3)  # –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è –±–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    
    thinking_container.empty()
    progress_container.empty()


def display_extracted_params(params_dict):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if not params_dict:
        return
        
    st.subheader("üß† –ß—Ç–æ –ø–æ–Ω—è–ª –ò–ò –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    cols = st.columns(4)
    
    metrics_data = [
        ("üìç", "–õ–æ–∫–∞—Ü–∏—è", params_dict.get('location', '‚Äî')),
        ("üë•", "–ì–æ—Å—Ç–µ–π", f"{params_dict.get('adults', '‚Äî')} –≤–∑—Ä–æ—Å–ª—ã—Ö"),
        ("üìÖ", "–ó–∞–µ–∑–¥", params_dict.get('checkin', '‚Äî')),
        ("üìÖ", "–í—ã–µ–∑–¥", params_dict.get('checkout', '‚Äî')),
    ]
    
    for i, (emoji, label, value) in enumerate(metrics_data):
        with cols[i]:
            st.metric(f"{emoji} {label}", value)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    additional_params = []
    if params_dict.get('children'):
        additional_params.append(f"üë∂ –î–µ—Ç–∏: {params_dict['children']}")
    if params_dict.get('pets'):
        additional_params.append(f"üêï –ü–∏—Ç–æ–º—Ü—ã: {params_dict['pets']}")
    if params_dict.get('maxPrice'):
        additional_params.append(f"üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: ${params_dict['maxPrice']}")
    if params_dict.get('minPrice'):
        additional_params.append(f"üí∏ –ú–∏–Ω. —Ü–µ–Ω–∞: ${params_dict['minPrice']}")
    
    if additional_params:
        st.info(" | ".join(additional_params))


def display_search_results(listings):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    if not listings:
        st.error("üòî –ñ–∏–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
        return
    
    st.subheader(f"üè† –ù–∞–π–¥–µ–Ω–æ {len(listings)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∂–∏–ª—å—è")
    
    # –§–∏–ª—å—Ç—Ä—ã –≤ expander
    with st.expander("üîß –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", expanded=False):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            show_only = st.selectbox("–ü–æ–∫–∞–∑–∞—Ç—å", ["–¢–æ–ø 5", "–¢–æ–ø 10", "–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"])
        with col2:
            sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ", ["–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "–¶–µ–Ω–µ", "–†–µ–π—Ç–∏–Ω–≥—É"])
        with col3:
            show_badges_only = st.checkbox("–¢–æ–ª—å–∫–æ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫–∞–∑–∞
    max_results = {"–¢–æ–ø 5": 5, "–¢–æ–ø 10": 10, "–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã": len(listings)}[show_only]
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω –±–µ–∑ —Ñ–æ—Ç–æ)
    for idx, listing in enumerate(listings[:max_results]):
        name = listing["demandStayListing"]["description"]["name"]["localizedStringWithTranslationPreference"]
        price_details = listing["structuredDisplayPrice"]["explanationData"]["priceDetails"]
        rating_text = listing.get("avgRatingA11yLabel", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
        badges = listing.get("badges", "")
        url = listing.get("url", "")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        if "out of 5" in rating_text:
            rating = rating_text.split(" ")[0]
            rating_display = f"‚≠ê {rating}/5"
        else:
            rating_display = "‚≠ê –ù–æ–≤–æ–µ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
        formatted_price = format_price(price_details)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        with st.container():
            col1, col2 = st.columns([5, 1])
            
            with col1:
                st.markdown(f"### {idx+1}. {name}")
                
                # –ò–Ω—Ñ–æ —Å—Ç—Ä–æ–∫–∞
                info_parts = [rating_display, f"üí∞ {formatted_price}"]
                if badges:
                    info_parts.append(f"üèÜ {badges}")
                
                st.markdown(" | ".join(info_parts))
                
                # –°—Å—ã–ª–∫–∞ –Ω–∞ Airbnb
                if url:
                    st.markdown(f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Airbnb]({url})")
            
            with col2:
                st.markdown("<br>", unsafe_allow_html=True)  # –û—Ç—Å—Ç—É–ø
                if st.button("üîç AI –ê–Ω–∞–ª–∏–∑", key=f"analyze_{idx}", use_container_width=True):
                    perform_analysis(idx)
        
        st.divider()


def format_price(price_text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ Airbnb"""
    if "x" in price_text and "nights:" in price_text:
        try:
            parts = price_text.split(":")
            left_part = parts[0]
            right_part = parts[1].strip()
            price_per_night = left_part.split("x")[0].strip().replace("$", "")
            nights = left_part.split("x")[1].strip().split()[0]
            total_price = right_part.replace("$", "").replace(",", "").strip()
            return f"${price_per_night}/–Ω–æ—á—å (${total_price} –∑–∞ {nights} –Ω–æ—á–µ–π)"
        except:
            return price_text
    elif "x" in price_text:
        price_per_night = price_text.split("x")[0].strip().replace("$", "")
        return f"${price_per_night}/–Ω–æ—á—å"
    return price_text


def display_ai_analysis():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞ –∏ TripAdvisor –¥–∞–Ω–Ω—ã—Ö"""
    if not st.session_state.report:
        return
    
    # –Ø–∫–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
    analysis_anchor = st.empty()
    
    st.subheader("ü§ñ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∂–∏–ª—å—è")
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üè† AI –ê–Ω–∞–ª–∏–∑ –∂–∏–ª—å—è", 
        "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã", 
        "üé≠ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "üí¨ –û—Ç–∑—ã–≤—ã –æ —Ä–∞–π–æ–Ω–µ",
        "üåç –û—Ç—á–µ—Ç –æ –≥–æ—Ä–æ–¥–µ"
    ])
    
    with tab1:
        # AI –æ—Ç—á–µ—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ò–ò")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—á–µ—Ç –≤ –∫—Ä–∞—Å–∏–≤–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        with st.container():
            st.markdown(f"""
            <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 10px; border-left: 4px solid #667eea;">
                {st.session_state.report.replace('\n', '<br>')}
            </div>
            """, unsafe_allow_html=True)
    
    with tab2:
        render_tripadvisor_section("–†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º", "1", "üçΩÔ∏è")
    
    with tab3:
        render_tripadvisor_section("–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º", "2", "üé≠")
    
    with tab4:
        render_tripadvisor_section("–û—Ç–∑—ã–≤—ã –æ —Ä–∞–π–æ–Ω–µ", "4", "üí¨")
    
    with tab5:
        render_tripadvisor_section("–û—Ç—á–µ—Ç –æ –≥–æ—Ä–æ–¥–µ", "3", "üåç")


def render_tripadvisor_section(title, choice_code, emoji):
    """–†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ TripAdvisor"""
    st.markdown(f"### {emoji} {title}")
    
    if st.button(f"üåç TripAdvisor: –ü–æ–ª—É—á–∏—Ç—å {title.lower()}", key=f"trip_{choice_code}", use_container_width=True):
        start_tripadvisor()
        if st.session_state.tripadvisor_started:
            with st.spinner(f"üåç –ò—â—É {title.lower()} —á–µ—Ä–µ–∑ TripAdvisor..."):
                result = st.session_state.integrator.process_additional_info_request(
                    choice_code, st.session_state.current_listing_data
                )
                if result:
                    st.session_state.trip_report = result
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç TripAdvisor –ø–æ–ª—É—á–µ–Ω—ã!")
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    if st.session_state.trip_report:
        with st.container():
            st.markdown(f"""
            <div style="background: #e8f5e8; padding: 1.5rem; border-radius: 10px; border-left: 4px solid #28a745;">
                {st.session_state.trip_report.replace('\n', '<br>')}
            </div>
            """, unsafe_allow_html=True)


def start_airbnb():
    """–ó–∞–ø—É—Å–∫ Airbnb —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
    if not st.session_state.airbnb_started:
        with st.spinner("üöÄ –ó–∞–ø—É—Å–∫–∞—é Airbnb MCP —Å–µ—Ä–≤–µ—Ä..."):
            if st.session_state.airbnb_client.start_server():
                st.session_state.airbnb_started = True
                st.success("‚úÖ Airbnb MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Airbnb —Å–µ—Ä–≤–µ—Ä")


def start_tripadvisor():
    """–ó–∞–ø—É—Å–∫ TripAdvisor —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
    if not st.session_state.tripadvisor_started:
        with st.spinner("üåç –ó–∞–ø—É—Å–∫–∞—é TripAdvisor MCP —Å–µ—Ä–≤–µ—Ä..."):
            if st.session_state.integrator.start_tripadvisor_service():
                st.session_state.tripadvisor_started = True
                st.success("‚úÖ TripAdvisor MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å TripAdvisor —Å–µ—Ä–≤–µ—Ä")


def perform_search(query: str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º"""
    start_airbnb()
    if not st.session_state.airbnb_started:
        return
    
    # –ê–Ω–∏–º–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞
    show_thinking_animation()
    
    # AI –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    try:
        tool_desc = st.session_state.ai_agent.get_search_function_description(
            st.session_state.airbnb_client
        )
        params = st.session_state.ai_agent.parse_user_request(query, tool_desc)
        
        st.session_state.extracted_params = params.model_dump(exclude_none=True)
        st.session_state.current_query = query
        
        # –ü–æ–∏—Å–∫ –∂–∏–ª—å—è
        with st.spinner("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –Ω–∞ Airbnb..."):
            search_args = params.model_dump(exclude_none=True)
            listings = st.session_state.airbnb_client.search_accommodations(**search_args)
        
        st.session_state.listings = listings
        st.session_state.search_location = params.location
        st.session_state.selected_index = None
        st.session_state.report = ""
        st.session_state.trip_report = ""
        st.session_state.current_listing_data = None
        
        if listings:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(listings)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∂–∏–ª—å—è!")
        else:
            st.warning("‚ö†Ô∏è –ñ–∏–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")


def perform_analysis(index: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∏–ª—å—è"""
    st.session_state.selected_index = index
    listing = st.session_state.listings[index]
    
    with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—ã–π AI –æ—Ç—á–µ—Ç..."):
        try:
            data = st.session_state.analyzer.get_full_listing_data(
                listing,
                st.session_state.airbnb_client,
                st.session_state.search_location,
            )
            report = st.session_state.analyzer.generate_ai_report(
                data, st.session_state.current_query
            )
            st.session_state.report = report
            st.session_state.trip_report = ""
            st.session_state.current_listing_data = data
            
            # –ë–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
            st.success("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤! –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞.")
            
            # –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ –∫ –∞–Ω–∞–ª–∏–∑—É
            st.markdown("""
            <script>
            setTimeout(function() {
                const analysisSection = document.querySelector('[data-testid="element-container"]:has([data-testid="stSubheader"]):has(text):last-of-type');
                if (analysisSection) {
                    analysisSection.scrollIntoView({behavior: 'smooth', block: 'start'});
                }
            }, 1000);
            </script>
            """, unsafe_allow_html=True)
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


def stop_servers():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    if st.session_state.airbnb_started:
        st.session_state.airbnb_client.stop_server()
        st.session_state.airbnb_started = False
    if st.session_state.tripadvisor_started:
        st.session_state.integrator.stop_tripadvisor_service()
        st.session_state.tripadvisor_started = False
    st.success("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


# ====== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ======
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    init_state()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    render_header()
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ sidebar
    show_server_status()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.markdown("### üí¨ –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞ –æ–±—ã—á–Ω–æ–º —è–∑—ã–∫–µ")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    with st.expander("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤", expanded=False):
        st.markdown("""
        - "–ù—É–∂–Ω–æ –∂–∏–ª—å–µ –≤ –ö–∏–µ–≤–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è –¥–≤–æ–∏—Ö"
        - "–î–µ—à–µ–≤–æ–µ –∂–∏–ª—å–µ –¥–æ $50 –≤ —Ü–µ–Ω—Ç—Ä–µ –õ–æ–Ω–¥–æ–Ω–∞ —Å —Å–æ–±–∞–∫–æ–π"
        - "–ü–∞—Ä–∏–∂ —Å 15 –∏—é–ª—è –ø–æ 20 –∏—é–ª—è –¥–ª—è —Å–µ–º—å–∏ —Å —Ä–µ–±–µ–Ω–∫–æ–º"
        - "Airbnb –≤ –ù—å—é-–ô–æ—Ä–∫–µ —Ä—è–¥–æ–º —Å –¢–∞–π–º—Å –°–∫–≤–µ—Ä"
        """)
    
    # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
    col1, col2 = st.columns([4, 1])
    
    with col1:
        user_query = st.text_input(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å:", 
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù—É–∂–Ω–æ –∂–∏–ª—å–µ –≤ –ü–∞—Ä–∏–∂–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è –¥–≤–æ–∏—Ö",
            label_visibility="collapsed"
        )
    
    with col2:
        search_button = st.button("üîç –ù–∞–π—Ç–∏", use_container_width=True, type="primary")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    if search_button and user_query.strip():
        perform_search(user_query.strip())
    elif search_button:
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if st.session_state.extracted_params:
        st.markdown("---")
        display_extracted_params(st.session_state.extracted_params)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    if st.session_state.listings:
        st.markdown("---")
        display_search_results(st.session_state.listings)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞
    if st.session_state.report:
        st.markdown("---")
        display_ai_analysis()


if __name__ == "__main__":
    main()