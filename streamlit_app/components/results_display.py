# streamlit_app/components/results_display.py
"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è
"""

import streamlit as st
import re
from typing import List, Dict, Callable
from utils.ui_helpers import UIHelpers
from app_config.streamlit_config import DISPLAY_CONFIG


class ResultsDisplay:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.ui_helpers = UIHelpers()
    
    def render(self, listings: List[Dict], perform_analysis_callback: Callable):
        """
        –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        
        Args:
            listings: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∂–∏–ª—å—è
            perform_analysis_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
        """
        if not listings:
            st.error("üòî –ñ–∏–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
            return
        
        st.markdown("---")
        st.subheader(f"üè† –ù–∞–π–¥–µ–Ω–æ {len(listings)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∂–∏–ª—å—è")
        
        # –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        max_results, sort_by = self._render_filters()
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sorted_listings = self._apply_sorting(listings, sort_by)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∂–∏–ª—å—è
        self._render_listing_cards(sorted_listings[:max_results], perform_analysis_callback)
    
    def _render_filters(self) -> tuple:
        """
        –†–µ–Ω–¥–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Returns:
            tuple: (max_results: int, sort_by: str)
        """
        with st.expander("üîß –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", expanded=False):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                show_only = st.selectbox(
                    "–ü–æ–∫–∞–∑–∞—Ç—å", 
                    DISPLAY_CONFIG["max_results_options"]
                )
            
            with col2:
                sort_by = st.selectbox(
                    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ", 
                    DISPLAY_CONFIG["sort_options"]
                )
            
            with col3:
                show_badges_only = st.checkbox("–¢–æ–ª—å–∫–æ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫–∞–∑–∞
        max_results_map = {
            "–¢–æ–ø 5": 5, 
            "–¢–æ–ø 10": 10, 
            "–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã": 1000  # –ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –¥–ª—è "–≤—Å–µ—Ö"
        }
        
        max_results = max_results_map.get(show_only, DISPLAY_CONFIG["default_max_results"])
        return max_results, sort_by
    
    def _apply_sorting(self, listings: List[Dict], sort_by: str) -> List[Dict]:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ —Å–ø–∏—Å–∫—É –∂–∏–ª—å—è
        
        Args:
            listings: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫
            sort_by: –¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            
        Returns:
            List[Dict]: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        """
        if sort_by == "–¶–µ–Ω–µ":
            return sorted(listings, key=self._extract_price_for_sorting)
        elif sort_by == "–†–µ–π—Ç–∏–Ω–≥—É":
            return sorted(listings, key=self._extract_rating_for_sorting, reverse=True)
        else:
            return listings  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _extract_price_for_sorting(self, listing: Dict) -> float:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        try:
            price_details = listing["structuredDisplayPrice"]["explanationData"]["priceDetails"]
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω—ã
            price_match = re.search(r'\$(\d+)', price_details)
            return float(price_match.group(1)) if price_match else 999999
        except:
            return 999999  # –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    
    def _extract_rating_for_sorting(self, listing: Dict) -> float:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        try:
            rating_text = listing.get("avgRatingA11yLabel", "0")
            if "out of 5" in rating_text:
                return float(rating_text.split(" ")[0])
            return 0.0  # –î–ª—è –Ω–æ–≤—ã—Ö –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
        except:
            return 0.0
    
    def _render_listing_cards(self, listings: List[Dict], perform_analysis_callback: Callable):
        """
        –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –∂–∏–ª—å—è
        
        Args:
            listings: –°–ø–∏—Å–æ–∫ –∂–∏–ª—å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            perform_analysis_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        for idx, listing in enumerate(listings):
            self._render_single_card(idx, listing, perform_analysis_callback)
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
            if idx < len(listings) - 1:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º divider –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                st.markdown("<br>", unsafe_allow_html=True)
    
    def _render_single_card(self, idx: int, listing: Dict, perform_analysis_callback: Callable):
        """
        –†–µ–Ω–¥–µ—Ä –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∂–∏–ª—å—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        
        Args:
            idx: –ò–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ
            listing: –î–∞–Ω–Ω—ã–µ –æ –∂–∏–ª—å–µ
            perform_analysis_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        name = listing["demandStayListing"]["description"]["name"]["localizedStringWithTranslationPreference"]
        price_details = listing["structuredDisplayPrice"]["explanationData"]["priceDetails"]
        rating_text = listing.get("avgRatingA11yLabel", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
        badges = listing.get("badges", "")
        url = listing.get("url", "")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        formatted_price = self.ui_helpers.format_price(price_details)
        rating_display = self.ui_helpers.extract_rating(rating_text)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        # st.markdown('<div class="listing-card">', unsafe_allow_html=True)
        
        col1, col2 = st.columns([5, 1])
        
        with col1:
            self._render_card_content(idx, name, formatted_price, rating_display, badges, url)
        
        with col2:
            self._render_card_action(idx, perform_analysis_callback)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    def _render_card_content(self, idx: int, name: str, price: str, rating: str, badges: str, url: str):
        """–†–µ–Ω–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å CSS –∫–ª–∞—Å—Å–æ–º
        st.markdown(f"""
        <div class="card-title">
            <h4>{idx+1}. {name}</h4>
        </div>
        """, unsafe_allow_html=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        info_parts = [rating, f"üí∞ {price}"]
        if badges:
            info_parts.append(f"üèÜ {badges}")
        
        st.markdown(f"**{self.ui_helpers.create_info_metrics(info_parts)}**")
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ Airbnb
        if url:
            st.markdown(f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Airbnb]({url})")
    
    def _render_card_action(self, idx: int, perform_analysis_callback: Callable):
        """–†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ"""
        st.markdown("<br>", unsafe_allow_html=True)  # –û—Ç—Å—Ç—É–ø
        if st.button("üîç AI –ê–Ω–∞–ª–∏–∑", key=f"analyze_{idx}", use_container_width=True):
            perform_analysis_callback(idx)