# streamlit_app/utils/session_manager.py
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º Streamlit —Å–µ—Å—Å–∏–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ MCP
"""

import streamlit as st
from airbnb import MCPClient as AirbnbClient, Formatter
from shared import AIAgent, ListingAnalyzer
from tripadvisor import Integrator
from .animations import show_thinking_animation


class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏ MCP –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π"""
        self._init_session_state()
    
    def _init_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ"""
        if 'initialized' not in st.session_state:
            # –ö–ª–∏–µ–Ω—Ç—ã
            st.session_state.airbnb_client = AirbnbClient()
            st.session_state.formatter = Formatter()
            st.session_state.ai_agent = AIAgent()
            st.session_state.analyzer = ListingAnalyzer()
            st.session_state.integrator = Integrator()
            
            # –°—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–µ—Ä–æ–≤
            st.session_state.airbnb_started = False
            st.session_state.tripadvisor_started = False
            
            # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            st.session_state.listings = []
            st.session_state.selected_index = None
            st.session_state.search_location = ""
            st.session_state.report = ""
            st.session_state.trip_report = ""
            st.session_state.extracted_params = {}
            st.session_state.current_query = ""
            st.session_state.current_listing_data = None
            
            st.session_state.initialized = True
    
    def show_server_status(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ sidebar"""
        with st.sidebar:
            st.subheader("üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            # Airbnb —Å—Ç–∞—Ç—É—Å
            if st.session_state.airbnb_started:
                st.markdown('<p class="status-success">‚úÖ Airbnb MCP: –ê–∫—Ç–∏–≤–µ–Ω</p>', unsafe_allow_html=True)
            else:
                st.markdown('<p class="status-error">‚ùå Airbnb MCP: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>', unsafe_allow_html=True)
            
            # TripAdvisor —Å—Ç–∞—Ç—É—Å
            if st.session_state.tripadvisor_started:
                st.markdown('<p class="status-success">‚úÖ TripAdvisor MCP: –ê–∫—Ç–∏–≤–µ–Ω</p>', unsafe_allow_html=True)
            else:
                st.markdown('<p class="status-error">‚ùå TripAdvisor MCP: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>', unsafe_allow_html=True)
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if st.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã", use_container_width=True):
                self.stop_all_servers()
                st.rerun()
    
    def start_airbnb_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Airbnb —Å–µ—Ä–≤–µ—Ä–∞"""
        if not st.session_state.airbnb_started:
            with st.spinner("üöÄ –ó–∞–ø—É—Å–∫–∞—é Airbnb MCP —Å–µ—Ä–≤–µ—Ä..."):
                if st.session_state.airbnb_client.start_server():
                    st.session_state.airbnb_started = True
                    st.success("‚úÖ Airbnb MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                    return True
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Airbnb —Å–µ—Ä–≤–µ—Ä")
                    return False
        return True
    
    def start_tripadvisor_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ TripAdvisor —Å–µ—Ä–≤–µ—Ä–∞"""
        if not st.session_state.tripadvisor_started:
            with st.spinner("üåç –ó–∞–ø—É—Å–∫–∞—é TripAdvisor MCP —Å–µ—Ä–≤–µ—Ä..."):
                if st.session_state.integrator.start_tripadvisor_service():
                    st.session_state.tripadvisor_started = True
                    st.success("‚úÖ TripAdvisor MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                    return True
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å TripAdvisor —Å–µ—Ä–≤–µ—Ä")
                    return False
        return True
    
    def stop_all_servers(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        if st.session_state.airbnb_started:
            st.session_state.airbnb_client.stop_server()
            st.session_state.airbnb_started = False
        if st.session_state.tripadvisor_started:
            st.session_state.integrator.stop_tripadvisor_service()
            st.session_state.tripadvisor_started = False
        st.success("‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def perform_search(self, query: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º"""
        if not self.start_airbnb_server():
            return
        
        # –ê–Ω–∏–º–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞
        show_thinking_animation()
        
        try:
            # AI –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            tool_desc = st.session_state.ai_agent.get_search_function_description(
                st.session_state.airbnb_client
            )
            params = st.session_state.ai_agent.parse_user_request(query, tool_desc)
            
            st.session_state.extracted_params = params.model_dump(exclude_none=True)
            st.session_state.current_query = query
            
            # –ü–æ–∏—Å–∫ –∂–∏–ª—å—è
            with st.spinner("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –Ω–∞ Airbnb..."):
                search_args = params.model_dump(exclude_none=True)
                listings = st.session_state.airbnb_client.search_accommodations(**search_args)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.session_state.listings = listings
            st.session_state.search_location = params.location
            st.session_state.selected_index = None
            st.session_state.report = ""
            st.session_state.trip_report = ""
            st.session_state.current_listing_data = None
            
            if listings:
                st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(listings)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∂–∏–ª—å—è!")
            else:
                st.warning("‚ö†Ô∏è –ñ–∏–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
    
    def perform_analysis(self, index: int):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∏–ª—å—è"""
        st.session_state.selected_index = index
        listing = st.session_state.listings[index]
        
        with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—ã–π AI –æ—Ç—á–µ—Ç..."):
            try:
                data = st.session_state.analyzer.get_full_listing_data(
                    listing,
                    st.session_state.airbnb_client,
                    st.session_state.search_location,
                )
                report = st.session_state.analyzer.generate_ai_report(
                    data, st.session_state.current_query
                )
                st.session_state.report = report
                st.session_state.trip_report = ""
                st.session_state.current_listing_data = data
                
                # –°–¥–µ—Ä–∂–∞–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
                st.success("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤! –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞.")
                
                # Auto-scroll –∫ –∞–Ω–∞–ª–∏–∑—É
                st.markdown("""
                <script>
                setTimeout(function() {
                    const analysisSection = document.querySelector('[data-testid="element-container"]:has([data-testid="stSubheader"]):has(text):last-of-type');
                    if (analysisSection) {
                        analysisSection.scrollIntoView({behavior: 'smooth', block: 'start'});
                    }
                }, 1000);
                </script>
                """, unsafe_allow_html=True)
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
    
    def get_tripadvisor_data(self, choice_code: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç TripAdvisor"""
        if not self.start_tripadvisor_server():
            return ""
        
        try:
            result = st.session_state.integrator.process_additional_info_request(
                choice_code, st.session_state.current_listing_data
            )
            return result or ""
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ TripAdvisor: {str(e)}")
            return ""