# shared/listing_analyzer.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∂–∏–ª—å—è —Å –ø–æ–º–æ—â—å—é –ò–ò
"""

import json
from typing import List, Dict, Any, Optional
from openai import OpenAI
from config import OPENAI_CONFIG, EMOJIS


class ListingAnalyzer:
    """–ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∂–∏–ª—å—é"""
    
    def __init__(self, api_key: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            api_key: API –∫–ª—é—á OpenAI
        """
        self.api_key = api_key or OPENAI_CONFIG["api_key"]
        self.client = OpenAI(api_key=self.api_key)
        self.model = OPENAI_CONFIG["model"]
    
    def select_listing_interactive(self, listings: List[Dict]) -> Optional[Dict]:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∂–∏–ª—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        
        Args:
            listings: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∂–∏–ª—å—è
            
        Returns:
            Dict: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∂–∏–ª—å–µ –∏–ª–∏ None
        """
        if not listings:
            print(f"{EMOJIS['error']} –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        print(f"\n{EMOJIS['brain']} –í–´–ë–ï–†–ò–¢–ï –ñ–ò–õ–¨–ï –î–õ–Ø –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print("="*60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫
        for i, listing in enumerate(listings[:10], 1):
            name = listing["demandStayListing"]["description"]["name"]["localizedStringWithTranslationPreference"]
            price_details = listing["structuredDisplayPrice"]["explanationData"]["priceDetails"]
            print(f"{i:2d}. {name[:50]}{'...' if len(name) > 50 else ''}")
            print(f"    üí∞ {price_details}")
        
        print(f"\n0. {EMOJIS['back']} –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É")
        
        while True:
            try:
                choice = input(f"\n{EMOJIS['select']} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-{min(len(listings), 10)}): ").strip()
                
                if choice == "0":
                    return None
                
                choice_num = int(choice)
                if 1 <= choice_num <= min(len(listings), 10):
                    selected = listings[choice_num - 1]
                    print(f"{EMOJIS['success']} –í—ã–±—Ä–∞–Ω–æ: {selected['demandStayListing']['description']['name']['localizedStringWithTranslationPreference']}")
                    return selected
                else:
                    print(f"{EMOJIS['error']} –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ {min(len(listings), 10)}")
                    
            except ValueError:
                print(f"{EMOJIS['error']} –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    def get_full_listing_data(self, listing: Dict, airbnb_client, search_location) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∂–∏–ª—å–µ
        
        Args:
            listing: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–ª—å–µ
            airbnb_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º
            search_location: –ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ –¥–ª—è TripAdvisor
            
        Returns:
            Dict: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–ª—å–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º
        """
        print(f"{EMOJIS['details']} –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ search_location
        search_city = self._extract_city_from_location(search_location)
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞
        basic_info = {
            "id": listing["id"],
            "name": listing["demandStayListing"]["description"]["name"]["localizedStringWithTranslationPreference"],
            "url": listing["url"],
            "rating": listing.get("avgRatingA11yLabel", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"),
            "badges": listing.get("badges", ""),
            "price_info": listing["structuredDisplayPrice"]["explanationData"]["priceDetails"],
            "coordinates": listing["demandStayListing"]["location"]["coordinate"],
            "search_city": search_city
        }
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
        details = airbnb_client.get_listing_details(listing["id"])
        
        return {
            "basic": basic_info,
            "details": details
        }
        
    def _extract_city_from_location(self, search_location: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ location —Å—Ç—Ä–æ–∫–∏
        
        Args:
            search_location: "Kiev, Ukraine" –∏–ª–∏ "New York, NY, USA"
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        """
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ –∑–∞–ø—è—Ç–æ–π
        city = search_location.split(',')[0].strip()
        return city if city else "Kiev"
    
    def generate_ai_report(self, listing_data: Dict, user_request: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        print(f"{EMOJIS['ai']} –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∂–∏–ª—å–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç...")
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        processed_data = self._preprocess_listing_data(listing_data)
        
        system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ —Ç—É—Ä–∏–∑–º—É. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∂–∏–ª—å–µ –Ω–∞ Airbnb.

    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞:
    1. üè† –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    2. ‚≠ê –†–ï–ô–¢–ò–ù–ì –ò –û–¢–ó–´–í–´  
    3. üí∞ –°–¢–û–ò–ú–û–°–¢–¨ –ò –¶–ï–ù–ù–û–°–¢–¨
    4. üè¢ –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï
    5. üõèÔ∏è –£–î–û–ë–°–¢–í–ê –ò –û–°–û–ë–ï–ù–ù–û–°–¢–ò
    6. ‚úÖ –ü–õ–Æ–°–´
    7. ‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–´–ï –ú–ò–ù–£–°–´ (–£–ß–ò–¢–´–í–ê–Ø –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
    8. üéØ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

    –ü–∏—à–∏ –∂–∏–≤—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º. –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º - —É–∫–∞–∑—ã–≤–∞–π –∫–∞–∫ –ø–ª—é—Å—ã, —Ç–∞–∫ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏."""

        user_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∂–∏–ª—å–µ:

    –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
    ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {processed_data['name']}
    ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {processed_data['rating']} 
    ‚Ä¢ –¶–µ–Ω–∞: {processed_data['price_per_night']}/–Ω–æ—á—å
    ‚Ä¢ –†–∞–π–æ–Ω: {processed_data['location']}
    ‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {processed_data['highlights']}

    –£–î–û–ë–°–¢–í–ê:
    {processed_data['amenities_formatted']}

    –ü–û–õ–ò–¢–ò–ö–ò:
    {processed_data['policies']}

    –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_request}

    –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å —É—á–µ—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1500,
                temperature=0.3
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"

    def _preprocess_listing_data(self, listing_data: Dict) -> Dict:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        basic = listing_data["basic"]
        details = listing_data["details"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        processed = {
            "name": basic["name"],
            "rating": basic["rating"],
            "price_per_night": self._extract_price_per_night(basic["price_info"]),
            "location": self._get_location_info(details),
            "highlights": self._get_highlights(details),
            "amenities_formatted": self._format_amenities(details),
            "policies": self._get_policies(details)
        }
        
        return processed

    def _extract_price_per_night(self, price_info: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å"""
        import re
        match = re.search(r'\$(\d+)', price_info)
        return f"${match.group(1)}" if match else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    def _get_location_info(self, details) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏"""
        # –ï—Å–ª–∏ details - —Å–ª–æ–≤–∞—Ä—å (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if isinstance(details, dict):
            details_list = details.get("details", [])
        else:
            # –ï—Å–ª–∏ details - —Å–ø–∏—Å–æ–∫ (—Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
            details_list = details
        
        for detail in details_list:
            if detail.get("id") == "LOCATION_DEFAULT":
                return detail.get("subtitle", "")
        return ""

    def _get_highlights(self, details) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"""
        if isinstance(details, dict):
            details_list = details.get("details", [])
        else:
            details_list = details
        
        for detail in details_list:
            if detail.get("id") == "HIGHLIGHTS_DEFAULT":
                return detail.get("highlights", "")
        return ""

    def _format_amenities(self, details) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–¥–æ–±—Å—Ç–≤–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫"""
        if isinstance(details, dict):
            details_list = details.get("details", [])
        else:
            details_list = details
        
        for detail in details_list:
            if detail.get("id") == "AMENITIES_DEFAULT":
                amenities_str = detail.get("seeAllAmenitiesGroups", "")
                # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                categories = amenities_str.split(", ")
                formatted = []
                
                for item in categories:
                    if ":" in item:
                        current_category, first_amenity = item.split(":", 1)
                        formatted.append(f"\n{current_category.strip()}:")
                        if first_amenity.strip():
                            formatted.append(f"  ‚Ä¢ {first_amenity.strip()}")
                    else:
                        formatted.append(f"  ‚Ä¢ {item.strip()}")
                
                return "".join(formatted)
        return ""

    def _get_policies(self, details) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –∑–∞—Å–µ–ª–µ–Ω–∏—è"""
        if isinstance(details, dict):
            details_list = details.get("details", [])
        else:
            details_list = details
        
        for detail in details_list:
            if detail.get("id") == "POLICIES_DEFAULT":
                return detail.get("houseRulesSections", "")
        return ""
    
    def analyze_listing_full_cycle(self, listings: List[Dict], airbnb_client, 
                             user_request: str = "", search_location: str = "Kiev, Ukraine") -> str:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞: –≤—ã–±–æ—Ä ‚Üí –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ‚Üí –ò–ò –æ—Ç—á–µ—Ç ‚Üí –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        
        Args:
            listings: –°–ø–∏—Å–æ–∫ –∂–∏–ª—å—è –¥–ª—è –≤—ã–±–æ—Ä–∞
            airbnb_client: –ö–ª–∏–µ–Ω—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
            user_request: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            search_location: –ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ –∏–∑ –ò–ò –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('back', 'new_search', 'exit')
        """
        # –®–∞–≥ 1: –í—ã–±–æ—Ä –∂–∏–ª—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        selected_listing = self.select_listing_interactive(listings)
        if not selected_listing:
            return 'back'
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–¥–∞–µ–º search_location)
        full_data = self.get_full_listing_data(selected_listing, airbnb_client, search_location)
        
        # –®–∞–≥ 3: –ò–ò –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç
        report = self.generate_ai_report(full_data, user_request)
        
        # –®–∞–≥ 4: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self._display_ai_report(report)
        
        # –®–∞–≥ 5: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
        return self._handle_post_analysis_options(full_data, listings, airbnb_client, user_request)
    
    def _handle_post_analysis_options(self, listing_data: Dict, listings: List[Dict], 
                                    airbnb_client, user_request: str) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–π –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏–∑–∞ –∂–∏–ª—å—è
        
        Args:
            listing_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∂–∏–ª—å—è
            listings: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∏–ª—å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É
            airbnb_client: –ö–ª–∏–µ–Ω—Ç Airbnb
            user_request: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            str: –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
                
        print(f"\n{EMOJIS['question']} –ß—Ç–æ –¥–∞–ª—å—à–µ?")
        print("1. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ (TripAdvisor)")
        print("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
        print("3. –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É")
        print("0. –ó–∞–≤–µ—Ä—à–∏—Ç—å")
        
        while True:
            choice = input(f"\n{EMOJIS['select']} –í–∞—à –≤—ã–±–æ—Ä (0-3): ").strip()
            
            if choice == "0":
                return 'exit'
            elif choice == "1":
                # –ó–∞–ø—É—Å–∫ TripAdvisor –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                return self._handle_tripadvisor_integration(listing_data, listings, airbnb_client, user_request)
            elif choice == "2":
                # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥—Ä—É–≥–æ–≥–æ –∂–∏–ª—å—è
                return self.analyze_listing_full_cycle(listings, airbnb_client, user_request)
            elif choice == "3":
                return 'new_search'
            else:
                print(f"{EMOJIS['error']} –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3")
    
    def _handle_tripadvisor_integration(self, listing_data: Dict, listings: List[Dict], 
                                      airbnb_client, user_request: str) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TripAdvisor
        
        Args:
            listing_data: –î–∞–Ω–Ω—ã–µ –æ –∂–∏–ª—å–µ
            listings: –°–ø–∏—Å–æ–∫ –≤—Å–µ–≥–æ –∂–∏–ª—å—è
            airbnb_client: –ö–ª–∏–µ–Ω—Ç Airbnb
            user_request: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è
        """
        from tripadvisor import Integrator
    
        integrator = Integrator()
        
        try:
            # –ó–∞–ø—É—Å–∫ TripAdvisor —Å–µ—Ä–≤–∏—Å–∞
            if not integrator.start_tripadvisor_service():
                print(f"{EMOJIS['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å TripAdvisor —Å–µ—Ä–≤–∏—Å")
                return self._handle_post_analysis_options(listing_data, listings, airbnb_client, user_request)
            
            # –¶–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å TripAdvisor
            while True:
                choice = integrator.show_additional_options_menu(listing_data)
                
                if choice == "0":  # –ó–∞–≤–µ—Ä—à–∏—Ç—å
                    return 'exit'
                elif choice == "5":  # –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∂–∏–ª—å–µ
                    return self.analyze_listing_full_cycle(listings, airbnb_client, user_request, listing_data["basic"]["search_city"])
                elif choice == "6":  # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫
                    return 'new_search'
                else:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    analysis = integrator.process_additional_info_request(choice, listing_data)
                    
                    if analysis:
                        print("\n" + "="*80)
                        print(f"{EMOJIS['tripadvisor']} –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• TRIPADVISOR")
                        print("="*80)
                        print(analysis)
                        print("="*80)
                        
                        input(f"\n{EMOJIS['question']} –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    else:
                        print(f"{EMOJIS['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        
        finally:
            integrator.stop_tripadvisor_service()
    
    def _display_ai_report(self, report: str) -> None:
        """
        –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ò–ò –æ—Ç—á–µ—Ç–∞
        
        Args:
            report: –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –æ—Ç –ò–ò
        """
        print("\n" + "="*80)
        print(f"{EMOJIS['ai']} –î–ï–¢–ê–õ–¨–ù–´–ô –ò–ò –ê–ù–ê–õ–ò–ó –ñ–ò–õ–¨–Ø")
        print("="*80)
        print(report)
        print("="*80)