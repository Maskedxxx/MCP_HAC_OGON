# listing_analyzer.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∂–∏–ª—å—è —Å –ø–æ–º–æ—â—å—é –ò–ò
"""

import json
from typing import List, Dict, Any, Optional
from openai import OpenAI
from config import OPENAI_CONFIG, EMOJIS, MESSAGES


class ListingAnalyzer:
    """–ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∂–∏–ª—å—é"""
    
    def __init__(self, api_key: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            api_key: API –∫–ª—é—á OpenAI
        """
        self.api_key = api_key or OPENAI_CONFIG["api_key"]
        self.client = OpenAI(api_key=self.api_key)
        self.model = OPENAI_CONFIG["model"]
    
    def select_listing_interactive(self, listings: List[Dict]) -> Optional[Dict]:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∂–∏–ª—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        
        Args:
            listings: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∂–∏–ª—å—è
            
        Returns:
            Dict: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∂–∏–ª—å–µ –∏–ª–∏ None
        """
        if not listings:
            print(f"{EMOJIS['error']} –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        print(f"\n{EMOJIS['brain']} –í–´–ë–ï–†–ò–¢–ï –ñ–ò–õ–¨–ï –î–õ–Ø –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print("="*60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫
        for i, listing in enumerate(listings[:10], 1):
            name = listing["demandStayListing"]["description"]["name"]["localizedStringWithTranslationPreference"]
            price_details = listing["structuredDisplayPrice"]["explanationData"]["priceDetails"]
            print(f"{i:2d}. {name[:50]}{'...' if len(name) > 50 else ''}")
            print(f"    üí∞ {price_details}")
        
        print(f"\n0. {EMOJIS['back']} –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É")
        
        while True:
            try:
                choice = input(f"\n{EMOJIS['select']} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-{min(len(listings), 10)}): ").strip()
                
                if choice == "0":
                    return None
                
                choice_num = int(choice)
                if 1 <= choice_num <= min(len(listings), 10):
                    selected = listings[choice_num - 1]
                    print(f"{EMOJIS['success']} –í—ã–±—Ä–∞–Ω–æ: {selected['demandStayListing']['description']['name']['localizedStringWithTranslationPreference']}")
                    return selected
                else:
                    print(f"{EMOJIS['error']} –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ {min(len(listings), 10)}")
                    
            except ValueError:
                print(f"{EMOJIS['error']} –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    def get_full_listing_data(self, listing: Dict, airbnb_client) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∂–∏–ª—å–µ
        
        Args:
            listing: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–ª—å–µ
            airbnb_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º
            
        Returns:
            Dict: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–ª—å–µ
        """
        print(f"{EMOJIS['details']} –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞
        basic_info = {
            "id": listing["id"],
            "name": listing["demandStayListing"]["description"]["name"]["localizedStringWithTranslationPreference"],
            "url": listing["url"],
            "rating": listing.get("avgRatingA11yLabel", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"),
            "badges": listing.get("badges", ""),
            "price_info": listing["structuredDisplayPrice"]["explanationData"]["priceDetails"],
            "coordinates": listing["demandStayListing"]["location"]["coordinate"]
        }
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
        details = airbnb_client.get_listing_details(listing["id"])
        
        return {
            "basic": basic_info,
            "details": details
        }
    
    def generate_ai_report(self, listing_data: Dict, user_request: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
        
        Args:
            listing_data: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–ª—å–µ
            user_request: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        """
        print(f"{EMOJIS['ai']} –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∂–∏–ª—å–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç...")
        
        system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ —Ç—É—Ä–∏–∑–º—É. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∂–∏–ª—å–µ –Ω–∞ Airbnb.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞:
1. üè† –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
2. ‚≠ê –†–ï–ô–¢–ò–ù–ì –ò –û–¢–ó–´–í–´  
3. üí∞ –°–¢–û–ò–ú–û–°–¢–¨ –ò –¶–ï–ù–ù–û–°–¢–¨
4. üè¢ –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï
5. üõèÔ∏è –£–î–û–ë–°–¢–í–ê –ò –û–°–û–ë–ï–ù–ù–û–°–¢–ò
6. ‚úÖ –ü–õ–Æ–°–´
7. ‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–´–ï –ú–ò–ù–£–°–´
8. üéØ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

–ü–∏—à–∏ –∂–∏–≤—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º. –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º - —É–∫–∞–∑—ã–≤–∞–π –∫–∞–∫ –ø–ª—é—Å—ã, —Ç–∞–∫ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏. 
–í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö —É—á–∏—Ç—ã–≤–∞–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        user_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∂–∏–ª—å–µ –∏ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:

–î–ê–ù–ù–´–ï –û –ñ–ò–õ–¨–ï:
{json.dumps(listing_data, indent=2, ensure_ascii=False)}

–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_request if user_request else "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑"}

–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, —á–µ—Å—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."""

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=15000,
                temperature=0.3  # –ù–µ–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–∫—Ç—ã
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
    
    def analyze_listing_full_cycle(self, listings: List[Dict], airbnb_client, user_request: str = "") -> None:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞: –≤—ã–±–æ—Ä ‚Üí –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ‚Üí –ò–ò –æ—Ç—á–µ—Ç
        
        Args:
            listings: –°–ø–∏—Å–æ–∫ –∂–∏–ª—å—è –¥–ª—è –≤—ã–±–æ—Ä–∞
            airbnb_client: –ö–ª–∏–µ–Ω—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
            user_request: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –®–∞–≥ 1: –í—ã–±–æ—Ä –∂–∏–ª—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        selected_listing = self.select_listing_interactive(listings)
        if not selected_listing:
            return
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        full_data = self.get_full_listing_data(selected_listing, airbnb_client)
        
        # –®–∞–≥ 3: –ò–ò –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç
        report = self.generate_ai_report(full_data, user_request)
        
        # –®–∞–≥ 4: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self._display_ai_report(report)
    
    def _display_ai_report(self, report: str) -> None:
        """
        –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ò–ò –æ—Ç—á–µ—Ç–∞
        
        Args:
            report: –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –æ—Ç –ò–ò
        """
        print("\n" + "="*80)
        print(f"{EMOJIS['ai']} –î–ï–¢–ê–õ–¨–ù–´–ô –ò–ò –ê–ù–ê–õ–ò–ó –ñ–ò–õ–¨–Ø")
        print("="*80)
        print(report)
        print("="*80)
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        print(f"\n{EMOJIS['question']} –ß—Ç–æ –¥–∞–ª—å—à–µ?")
        print("1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
        print("2. –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É")
        print("3. –ó–∞–≤–µ—Ä—à–∏—Ç—å")