# tripadvisor_integrator.py
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è TripAdvisor MCP —Å –∞–Ω–∞–ª–∏–∑–æ–º –∂–∏–ª—å—è
"""

from typing import Dict, List, Any, Optional
from openai import OpenAI
from tripadvisor_client import TripAdvisorMCPClient
from config import OPENAI_CONFIG, EMOJIS, MESSAGES


class TripAdvisorIntegrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä TripAdvisor –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–ª—å–µ"""
    
    def __init__(self, api_key: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            api_key: API –∫–ª—é—á OpenAI –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
        """
        self.openai_client = OpenAI(api_key=api_key or OPENAI_CONFIG["api_key"])
        self.tripadvisor_client = TripAdvisorMCPClient()
        self.model = OPENAI_CONFIG["model"]
    
    def start_tripadvisor_service(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ TripAdvisor —Å–µ—Ä–≤–∏—Å–∞
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
        """
        return self.tripadvisor_client.start_server()
    
    def stop_tripadvisor_service(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ TripAdvisor —Å–µ—Ä–≤–∏—Å–∞"""
        self.tripadvisor_client.stop_server()
    
    def show_additional_options_menu(self, listing_data: Dict) -> str:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
        
        Args:
            listing_data: –î–∞–Ω–Ω—ã–µ –æ –∂–∏–ª—å–µ
            
        Returns:
            str: –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è
        """
        location_name = listing_data["basic"]["name"]
        coordinates = listing_data["basic"]["coordinates"]
        
        print(f"\n{EMOJIS['tripadvisor']} {MESSAGES['additional_info_menu'].upper()}")
        print("="*60)
        print(f"–ñ–∏–ª—å–µ: {location_name}")
        print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates['latitude']}, {coordinates['longitude']}")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")
        print(f"1. {EMOJIS['restaurant']} –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º")
        print(f"2. {EMOJIS['attraction']} –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º")
        print(f"3. {EMOJIS['search']} –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞")
        print(f"4. {EMOJIS['review']} –û—Ç–∑—ã–≤—ã –æ —Ä–∞–π–æ–Ω–µ")
        print(f"5. {EMOJIS['back']} –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∂–∏–ª—å–µ")
        print(f"6. {EMOJIS['house']} –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ –∂–∏–ª—å—è")
        print("0. –ó–∞–≤–µ—Ä—à–∏—Ç—å")
        
        while True:
            choice = input(f"\n{EMOJIS['select']} –í–∞—à –≤—ã–±–æ—Ä (0-6): ").strip()
            if choice in ['0', '1', '2', '3', '4', '5', '6']:
                return choice
            print(f"{EMOJIS['error']} –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 6")
    
    def process_additional_info_request(self, choice: str, listing_data: Dict) -> Optional[str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        
        Args:
            choice: –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            listing_data: –î–∞–Ω–Ω—ã–µ –æ –∂–∏–ª—å–µ
            
        Returns:
            Optional[str]: –ò–ò –æ—Ç—á–µ—Ç –∏–ª–∏ None –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞/–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        coordinates = listing_data["basic"]["coordinates"]
        lat, lon = coordinates["latitude"], coordinates["longitude"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        location_name = listing_data["basic"]["name"]
        
        if choice == "1":
            return self._get_restaurants_analysis(lat, lon, location_name)
        elif choice == "2":
            return self._get_attractions_analysis(lat, lon, location_name)
        elif choice == "3":
            return self._get_city_search_analysis(location_name)
        elif choice == "4":
            return self._get_area_reviews_analysis(lat, lon, location_name)
        else:
            return None  # –í–æ–∑–≤—Ä–∞—Ç/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    
    def _get_restaurants_analysis(self, lat: float, lon: float, location_name: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Ä—è–¥–æ–º"""
        print(f"{EMOJIS['restaurant']} –ò—â—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –∂–∏–ª—å–µ–º...")
        
        restaurants = self.tripadvisor_client.search_nearby_locations(lat, lon, "restaurants")
        
        if not restaurants:
            return f"{EMOJIS['error']} –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return self._generate_tripadvisor_analysis(
            restaurants[:5], 
            "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", 
            f"—Ä—è–¥–æ–º —Å –∂–∏–ª—å–µ–º {location_name}"
        )
    
    def _get_attractions_analysis(self, lat: float, lon: float, location_name: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Ä—è–¥–æ–º"""
        print(f"{EMOJIS['attraction']} –ò—â—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º...")
        
        attractions = self.tripadvisor_client.search_nearby_locations(lat, lon, "attractions")
        
        if not attractions:
            return f"{EMOJIS['error']} –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return self._generate_tripadvisor_analysis(
            attractions[:5], 
            "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π", 
            f"—Ä—è–¥–æ–º —Å –∂–∏–ª—å–µ–º {location_name}"
        )
    
    def _get_city_search_analysis(self, location_name: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –≥–æ—Ä–æ–¥–∞ –ø–æ –ø–æ–∏—Å–∫—É"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏
        city = self._extract_city_name(location_name)
        print(f"{EMOJIS['search']} –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ {city}...")
        
        city_info = self.tripadvisor_client.search_locations(f"{city} attractions")
        
        if not city_info:
            return f"{EMOJIS['error']} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        return self._generate_tripadvisor_analysis(
            city_info[:7], 
            "–º–µ—Å—Ç –≤ –≥–æ—Ä–æ–¥–µ", 
            city
        )
    
    def _get_area_reviews_analysis(self, lat: float, lon: float, location_name: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ä–∞–π–æ–Ω–µ"""
        print(f"{EMOJIS['review']} –ò—â—É –æ—Ç–∑—ã–≤—ã –æ —Ä–∞–π–æ–Ω–µ...")
        
        # –ò—â–µ–º –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º –∏ –±–µ—Ä–µ–º –æ—Ç–∑—ã–≤—ã –ø–µ—Ä–≤–æ–≥–æ
        nearby_places = self.tripadvisor_client.search_nearby_locations(lat, lon)
        
        if not nearby_places:
            return f"{EMOJIS['error']} –ú–µ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –æ—Ç–∑—ã–≤—ã
        first_place = nearby_places[0]
        location_id = first_place.get("location_id")
        
        if not location_id:
            return f"{EMOJIS['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤"
        
        reviews = self.tripadvisor_client.get_location_reviews(location_id)
        
        if not reviews:
            return f"{EMOJIS['error']} –û—Ç–∑—ã–≤—ã –æ —Ä–∞–π–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return self._generate_reviews_analysis(reviews[:3], first_place["name"], location_name)
    
    def _generate_tripadvisor_analysis(self, data: List[Dict], data_type: str, context: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö TripAdvisor
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –æ—Ç TripAdvisor
            data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö (—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ —Ç.–¥.)
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–ª—å—è/–≥–æ—Ä–æ–¥–∞)
            
        Returns:
            str: –ò–ò –∞–Ω–∞–ª–∏–∑
        """
        print(f"{EMOJIS['ai']} {MESSAGES['tripadvisor_analysis']}...")
        
        system_prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—É—Ä–∏–∑–º—É. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ {data_type} –æ—Ç TripAdvisor –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç—á–µ—Ç.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞:
1. üéØ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê
2. üìç –¢–û–ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (3-5 –ª—É—á—à–∏—Ö –º–µ—Å—Ç)
3. üí° –ü–û–õ–ï–ó–ù–´–ï –°–û–í–ï–¢–´

–ü–∏—à–∏ –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º, –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º."""

        user_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {data_type} {context}:

–î–ê–ù–ù–´–ï TRIPADVISOR:
{self._format_tripadvisor_data(data)}

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∞."""

        try:
            response = self.openai_client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=800,
                temperature=0.3
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ TripAdvisor: {e}"
    
    def _generate_reviews_analysis(self, reviews: List[Dict], place_name: str, context: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        print(f"{EMOJIS['ai']} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã –æ —Ä–∞–π–æ–Ω–µ...")
        
        system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—Ç–∑—ã–≤–æ–≤ —Ç—É—Ä–∏—Å—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤—ã –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä–∞–π–æ–Ω–µ.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. üèòÔ∏è –û–ë–©–ï–ï –í–ü–ï–ß–ê–¢–õ–ï–ù–ò–ï –û –†–ê–ô–û–ù–ï
2. ‚úÖ –ß–¢–û –•–í–ê–õ–Ø–¢ –¢–£–†–ò–°–¢–´
3. ‚ö†Ô∏è –ù–ê –ß–¢–û –ñ–ê–õ–£–Æ–¢–°–Ø
4. üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ì–û–°–¢–ï–ô

–ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º, –≤—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã."""

        user_prompt = f"""–û—Ç–∑—ã–≤—ã –æ –º–µ—Å—Ç–µ "{place_name}" –≤ —Ä–∞–π–æ–Ω–µ –∂–∏–ª—å—è {context}:

–û–¢–ó–´–í–´:
{self._format_reviews_data(reviews)}

–°–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–π–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –æ—Ç–∑—ã–≤–æ–≤."""

        try:
            response = self.openai_client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=600,
                temperature=0.3
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}"
    
    def _format_tripadvisor_data(self, data: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö TripAdvisor –¥–ª—è –ò–ò"""
        formatted = []
        for i, item in enumerate(data, 1):
            name = item.get("name", "N/A")
            address = item.get("address_obj", {}).get("address_string", "N/A")
            location_id = item.get("location_id", "N/A")
            
            formatted.append(f"{i}. {name}\n   –ê–¥—Ä–µ—Å: {address}\n   ID: {location_id}")
        
        return "\n\n".join(formatted)
    
    def _format_reviews_data(self, reviews: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ò–ò"""
        formatted = []
        for i, review in enumerate(reviews, 1):
            title = review.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            text = review.get("text", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞")
            rating = review.get("rating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
            
            formatted.append(f"–û—Ç–∑—ã–≤ {i}:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–†–µ–π—Ç–∏–Ω–≥: {rating}\n–¢–µ–∫—Å—Ç: {text[:200]}...")
        
        return "\n\n".join(formatted)
    
    def _extract_city_name(self, location_name: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∏–ª—å—è"""
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        common_words = ["apartment", "studio", "room", "house", "flat", "place", "home"]
        words = location_name.lower().split()
        
        for word in words:
            if word not in common_words and len(word) > 3:
                return word.capitalize()
        
        return "Kiev"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é