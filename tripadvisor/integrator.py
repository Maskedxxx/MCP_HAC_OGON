# tripadvisor/integrator.py
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è TripAdvisor MCP —Å –∞–Ω–∞–ª–∏–∑–æ–º –∂–∏–ª—å—è
"""

from typing import Dict, List, Optional
from openai import OpenAI
from .client import MCPClient
from config import OPENAI_CONFIG, EMOJIS, MESSAGES


class Integrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä TripAdvisor –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–ª—å–µ"""
    
    def __init__(self, api_key: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            api_key: API –∫–ª—é—á OpenAI –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
        """
        self.openai_client = OpenAI(api_key=api_key or OPENAI_CONFIG["api_key"])
        self.tripadvisor_client = MCPClient()
        self.model = OPENAI_CONFIG["model"]
    
    def start_tripadvisor_service(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ TripAdvisor —Å–µ—Ä–≤–∏—Å–∞
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
        """
        return self.tripadvisor_client.start_server()
    
    def stop_tripadvisor_service(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ TripAdvisor —Å–µ—Ä–≤–∏—Å–∞"""
        self.tripadvisor_client.stop_server()
    
    def show_additional_options_menu(self, listing_data: Dict) -> str:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
        
        Args:
            listing_data: –î–∞–Ω–Ω—ã–µ –æ –∂–∏–ª—å–µ
            
        Returns:
            str: –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è
        """
        location_name = listing_data["basic"]["name"]
        coordinates = listing_data["basic"]["coordinates"]
        
        print(f"\n{EMOJIS['tripadvisor']} {MESSAGES['additional_info_menu'].upper()}")
        print("="*60)
        print(f"–ñ–∏–ª—å–µ: {location_name}")
        print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates['latitude']}, {coordinates['longitude']}")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")
        print(f"1. {EMOJIS['restaurant']} –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º")
        print(f"2. {EMOJIS['attraction']} –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º")
        print(f"3. {EMOJIS['search']} –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞")
        print(f"4. {EMOJIS['review']} –û—Ç–∑—ã–≤—ã –æ —Ä–∞–π–æ–Ω–µ")
        print(f"5. {EMOJIS['back']} –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∂–∏–ª—å–µ")
        print(f"6. {EMOJIS['house']} –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ –∂–∏–ª—å—è")
        print("0. –ó–∞–≤–µ—Ä—à–∏—Ç—å")
        
        while True:
            choice = input(f"\n{EMOJIS['select']} –í–∞—à –≤—ã–±–æ—Ä (0-6): ").strip()
            if choice in ['0', '1', '2', '3', '4', '5', '6']:
                return choice
            print(f"{EMOJIS['error']} –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 6")
    
    def process_additional_info_request(self, choice: str, listing_data: Dict) -> Optional[str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        coordinates = listing_data["basic"]["coordinates"]
        lat, lon = coordinates["latitude"], coordinates["longitude"]
        location_name = listing_data["basic"]["name"]
        
        if choice == "1":
            return self._get_restaurants_analysis(lat, lon, location_name)
        elif choice == "2":
            return self._get_attractions_analysis(lat, lon, location_name)
        elif choice == "3":
            return self._get_city_search_analysis(listing_data)
        elif choice == "4":
            return self._get_area_reviews_analysis(lat, lon, location_name)
        else:
            return None
    
    def _get_enriched_places(self, places: List[Dict], place_type: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç–∞–ª—è–º–∏ –¥–ª—è –º–µ—Å—Ç
        
        Args:
            places: –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç –æ—Ç TripAdvisor
            place_type: –¢–∏–ø –º–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            List[Dict]: –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        """
        print(f"{EMOJIS['details']} –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ {place_type} –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º...")
        enriched_places = []
        
        for i, place in enumerate(places, 1):
            location_id = place.get('location_id')
            name = place.get('name', 'N/A')
            
            print(f"  {i}. –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª–∏ –¥–ª—è: {name[:30]}...")
            
            if location_id:
                try:
                    details = self.tripadvisor_client.get_location_details(location_id)
                    description = details.get('description', '')
                    features = details.get('features', [])
                    
                    desc_len = len(description)
                    features_count = len(features)
                    
                    if desc_len > 0:
                        enriched_place = {
                            **place,
                            'description': description,
                            'features': features
                        }
                        enriched_places.append(enriched_place)
                        print(f"     ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {desc_len} —Å–∏–º–≤–æ–ª–æ–≤, –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {features_count}")
                        
                        if len(enriched_places) >= 5:
                            break
                    else:
                        print("     ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é - –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                        
                except Exception as e:
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
            else:
                print("     ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é - –Ω–µ—Ç location_id")
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {place_type} —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {len(enriched_places)}")
        return enriched_places
    
    def _get_restaurants_analysis(self, lat: float, lon: float, location_name: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Ä—è–¥–æ–º"""
        print(f"{EMOJIS['restaurant']} –ò—â—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º —Å –∂–∏–ª—å–µ–º...")
        
        restaurants = self.tripadvisor_client.search_nearby_locations(lat, lon, "restaurants")
        
        if not restaurants:
            return f"{EMOJIS['error']} –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        enriched_restaurants = self._get_enriched_places(restaurants, "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        
        if not enriched_restaurants:
            return f"{EMOJIS['error']} –†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return self._generate_tripadvisor_analysis(
            enriched_restaurants, 
            "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", 
            f"—Ä—è–¥–æ–º —Å –∂–∏–ª—å–µ–º {location_name}"
        )
    
    def _get_attractions_analysis(self, lat: float, lon: float, location_name: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Ä—è–¥–æ–º"""
        print(f"{EMOJIS['attraction']} –ò—â—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º...")
        
        attractions = self.tripadvisor_client.search_nearby_locations(lat, lon, "attractions")
        
        if not attractions:
            return f"{EMOJIS['error']} –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        enriched_attractions = self._get_enriched_places(attractions, "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        
        if not enriched_attractions:
            return f"{EMOJIS['error']} –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return self._generate_tripadvisor_analysis(
            enriched_attractions, 
            "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π", 
            f"—Ä—è–¥–æ–º —Å –∂–∏–ª—å–µ–º {location_name}"
        )
    
    def _get_city_search_analysis(self, listing_data: Dict) -> str:
        """–ê–Ω–∞–ª–∏–∑ –≥–æ—Ä–æ–¥–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é"""
        city = listing_data["basic"]["search_city"]
        print(f"{EMOJIS['search']} –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ {city}...")
        
        city_info = self.tripadvisor_client.search_locations(f"{city} attractions")
        
        if not city_info:
            return f"{EMOJIS['error']} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        enriched_city_info = self._get_enriched_places(city_info, "–º–µ—Å—Ç –≤ –≥–æ—Ä–æ–¥–µ")
        
        if not enriched_city_info:
            return f"{EMOJIS['error']} –ú–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return self._generate_tripadvisor_analysis(
            enriched_city_info, 
            "–º–µ—Å—Ç –≤ –≥–æ—Ä–æ–¥–µ", 
            city
        )
    
    def _get_area_reviews_analysis(self, lat: float, lon: float, location_name: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ä–∞–π–æ–Ω–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç"""
        print(f"{EMOJIS['review']} –°–æ–±–∏—Ä–∞—é –æ—Ç–∑—ã–≤—ã –æ —Ä–∞–π–æ–Ω–µ —Å —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã —Å –º–µ—Å—Ç –≥–¥–µ –æ–Ω–∏ –µ—Å—Ç—å
        aggregated_reviews = self._collect_reviews_from_available_places(lat, lon)
        
        if not aggregated_reviews:
            return f"{EMOJIS['error']} –û—Ç–∑—ã–≤—ã –æ —Ä–∞–π–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return self._generate_aggregated_reviews_analysis(aggregated_reviews, location_name)
    
    def _collect_reviews_from_available_places(self, lat: float, lon: float) -> List[Dict]:
        """
        –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∑—ã–≤—ã —Ç–æ–ª—å–∫–æ —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        """
        aggregated_reviews = []
        
        # –ò—â–µ–º –û–¢–î–ï–õ–¨–ù–û –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
        print("   üé≠ –ò—â—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        attractions = self.tripadvisor_client.search_nearby_locations(lat, lon, "attractions")
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(attractions)}")
        
        print("   üçΩÔ∏è –ò—â—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã...")
        restaurants = self.tripadvisor_client.search_nearby_locations(lat, lon, "restaurants")
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {len(restaurants)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ø–æ—Ç–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã)
        target_places = attractions[:4] + restaurants[:4]  # –ü–æ 4 –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–∞–∫—Å–∏–º—É–º
        
        if not target_places:
            return []
        
        print(f"   üìç –û—Ç–æ–±—Ä–∞–Ω–æ –º–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(target_places)}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∑—ã–≤—ã —Ç–æ–ª—å–∫–æ —Å –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
        places_with_reviews = 0
        target_reviews = 12
        
        for i, place in enumerate(target_places, 1):
            name = place.get('name', 'Unknown')
            location_id = place.get('location_id')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            place_type = "üé≠" if i <= len(attractions[:4]) else "üçΩÔ∏è"
            
            if not location_id:
                continue
            
            print(f"   {place_type} –ü—Ä–æ–≤–µ—Ä—è—é –º–µ—Å—Ç–æ {i}: {name[:30]}...")
            
            try:
                reviews = self.tripadvisor_client.get_location_reviews(location_id)
                review_count = len(reviews)
                
                if review_count > 0:
                    places_with_reviews += 1
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {review_count}")
                    
                    # –ë–µ—Ä–µ–º –¥–æ 3 –æ—Ç–∑—ã–≤–æ–≤ —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
                    reviews_to_take = min(3, review_count)
                    for review in reviews[:reviews_to_take]:
                        aggregated_reviews.append({
                            **review,
                            'source_place': name,
                            'source_type': 'attraction' if i <= len(attractions[:4]) else 'restaurant',
                            'source_location_id': location_id
                        })
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –µ—Å–ª–∏ —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–∑—ã–≤–æ–≤
                    if len(aggregated_reviews) >= target_reviews:
                        break
                else:
                    print("   ‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print(f"   üìä –ò—Ç–æ–≥: {len(aggregated_reviews)} –æ—Ç–∑—ã–≤–æ–≤ —Å {places_with_reviews} –º–µ—Å—Ç")
        return aggregated_reviews
    
    def _generate_tripadvisor_analysis(self, data: List[Dict], data_type: str, context: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö TripAdvisor
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –æ—Ç TripAdvisor
            data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö (—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.)
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è)
            
        Returns:
            str: –ò–ò –∞–Ω–∞–ª–∏–∑
        """
        print(f"{EMOJIS['ai']} –°–æ–∑–¥–∞—é –∞–Ω–∞–ª–∏–∑ {data_type}...")
        
        system_prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—É—Ä–∏–∑–º—É. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä {data_type} {context}.
        
–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. üìç –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
2. ‚≠ê –¢–û–ü-3 –ú–ï–°–¢–ê
3. üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."""

        user_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ {data_type} {context}:

{self._format_tripadvisor_data(data)}

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

        try:
            response = self.openai_client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=600,
                temperature=0.3
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}"
    
    def _generate_aggregated_reviews_analysis(self, aggregated_reviews: List[Dict], context: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–π–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
        """
        print(f"{EMOJIS['ai']} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(aggregated_reviews)} –æ—Ç–∑—ã–≤–æ–≤ –æ —Ä–∞–π–æ–Ω–µ...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
        sources_info = self._prepare_sources_summary(aggregated_reviews)
        
        system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—Ç–∑—ã–≤–æ–≤ —Ç—É—Ä–∏—Å—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤—ã —Å —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç –≤ —Ä–∞–π–æ–Ω–µ –∏ —Å–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–π–æ–Ω–µ –≤ —Ü–µ–ª–æ–º.

–í–ê–ñ–ù–û: 
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –û –†–ê–ô–û–ù–ï (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —É–¥–æ–±—Å—Ç–≤–∞)
- –ò–ì–ù–û–†–ò–†–£–ô —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç (–∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, —Å–µ—Ä–≤–∏—Å –æ—Ç–µ–ª—è)
- –ò—â–∏ –æ–±—â–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞–π–æ–Ω–µ, –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. üèòÔ∏è –û–ë–©–ï–ï –í–ü–ï–ß–ê–¢–õ–ï–ù–ò–ï –û –†–ê–ô–û–ù–ï
2. ‚úÖ –ß–¢–û –•–í–ê–õ–Ø–¢ –¢–£–†–ò–°–¢–´
3. ‚ö†Ô∏è –ù–ê –ß–¢–û –ñ–ê–õ–£–Æ–¢–°–Ø
4. üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ì–û–°–¢–ï–ô

–°–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–π–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –æ—Ç–∑—ã–≤–æ–≤."""

        user_prompt = f"""–ê–Ω–∞–ª–∏–∑ —Ä–∞–π–æ–Ω–∞ –∂–∏–ª—å—è {context} –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç:

–ò–°–¢–û–ß–ù–ò–ö–ò –û–¢–ó–´–í–û–í:
{sources_info}

–û–¢–ó–´–í–´:
{self._format_aggregated_reviews_data(aggregated_reviews)}

–°–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ –†–ê–ô–û–ù–ê (–Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç) –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤."""

        try:
            response = self.openai_client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=800,
                temperature=0.3
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}"

    def _prepare_sources_summary(self, aggregated_reviews: List[Dict]) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        sources = {}
        for review in aggregated_reviews:
            place_name = review.get('source_place', 'Unknown')
            
            if place_name not in sources:
                sources[place_name] = 0
            sources[place_name] += 1
        
        summary_lines = []
        for place, count in sources.items():
            summary_lines.append(f"‚Ä¢ {place} - {count} –æ—Ç–∑—ã–≤–∞")
        
        return "\n".join(summary_lines)

    def _format_aggregated_reviews_data(self, aggregated_reviews: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞"""
        formatted = []
        for i, review in enumerate(aggregated_reviews, 1):
            title = review.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            text = review.get("text", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞")
            rating = review.get("rating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
            source_place = review.get("source_place", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")
            
            formatted.append(f"–û—Ç–∑—ã–≤ {i} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source_place}):\n"
                            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                            f"–†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                            f"–¢–µ–∫—Å—Ç: {text[:250]}...")
        
        return "\n\n".join(formatted)
    
    def _format_tripadvisor_data(self, data: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö TripAdvisor –¥–ª—è –ò–ò"""
        formatted = []
        for i, item in enumerate(data, 1):
            name = item.get("name", "N/A")
            address = item.get("address_obj", {}).get("address_string", "N/A")
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—è —Å –¥–µ—Ç–∞–ª—è–º–∏
            description = item.get("description", "")
            features = item.get("features", [])
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            entry = f"{i}. {name}\n   –ê–¥—Ä–µ—Å: {address}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if description:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
                desc_short = description[:200] + "..." if len(description) > 200 else description
                entry += f"\n   –û–ø–∏—Å–∞–Ω–∏–µ: {desc_short}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if features:
                features_str = ", ".join(features[:5])  # –ú–∞–∫—Å–∏–º—É–º 5 –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
                entry += f"\n   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {features_str}"
                if len(features) > 5:
                    entry += f" (–µ—â–µ {len(features) - 5})"
            
            formatted.append(entry)
        
        return "\n\n".join(formatted)